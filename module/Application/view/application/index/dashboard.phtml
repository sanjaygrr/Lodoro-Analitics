<?php
/**
 * Dashboard view con datos reales.
 *
 * Se espera que $data sea un arreglo indexado, donde cada elemento es un arreglo asociativo con las siguientes claves:
 * - table_name o TABLE_NAME
 * - engine o ENGINE
 * - table_rows o TABLE_ROWS
 * - create_time o CREATE_TIME
 * - update_time o UPDATE_TIME
 */

// Filtrar solamente las tablas que empiezan con "MKP"
$filtered_data = [];
foreach ($data as $row) {
    $tableName = $row['TABLE_NAME'] ?? $row['table_name'] ?? '';
    if (strpos($tableName, 'MKP') === 0) { // Solo incluir tablas que empiezan con "MKP"
        $filtered_data[] = $row;
    }
}
// Reemplazar $data con los datos filtrados
$data = $filtered_data;

// IMPORTANTE: CONSULTAS SQL ADICIONALES PARA DATOS AVANZADOS
// Debes implementar estas consultas para obtener datos reales en lugar de ejemplos

// 1. CONSULTA PARA OBTENER ESTADOS DE CUMPLIMIENTO (por marketplace)
// $fulfillmentData = [];
// Ejemplo de SQL:
// SELECT COUNT(*) as count, Estado, SUBSTRING_INDEX(FROM_TABLE, '_', 2) as marketplace 
// FROM (
//   SELECT 'MKP_FALABELLA' as FROM_TABLE, Estado FROM MKP_FALABELLA
//   UNION ALL SELECT 'MKP_MERCADO_LIBRE' as FROM_TABLE, Estado FROM MKP_MERCADO_LIBRE
//   UNION ALL SELECT 'MKP_PARIS' as FROM_TABLE, Estado FROM MKP_PARIS
//   UNION ALL SELECT 'MKP_RIPLEY' as FROM_TABLE, Estado FROM MKP_RIPLEY
//   UNION ALL SELECT 'MKP_WALLMART' as FROM_TABLE, Estado FROM MKP_WALLMART
// ) combined
// GROUP BY Estado, marketplace
// ORDER BY marketplace, count DESC;

// 2. CONSULTA PARA OBTENER DATOS DE VENTAS POR FECHA
// $salesTrendData = [];
// Ejemplo de SQL:
// SELECT COUNT(*) as count, DATE(`Fecha de Creación`) as date, SUBSTRING_INDEX(FROM_TABLE, '_', 2) as marketplace 
// FROM (
//   SELECT 'MKP_FALABELLA' as FROM_TABLE, `Fecha de Creación` FROM MKP_FALABELLA
//   UNION ALL SELECT 'MKP_MERCADO_LIBRE' as FROM_TABLE, `Fecha de Creación` FROM MKP_MERCADO_LIBRE
//   UNION ALL SELECT 'MKP_PARIS' as FROM_TABLE, `Fecha de Creación` FROM MKP_PARIS
//   UNION ALL SELECT 'MKP_RIPLEY' as FROM_TABLE, `Fecha de Creación` FROM MKP_RIPLEY
//   UNION ALL SELECT 'MKP_WALLMART' as FROM_TABLE, `Fecha de Creación` FROM MKP_WALLMART
// ) combined
// WHERE `Fecha de Creación` >= DATE_SUB(NOW(), INTERVAL 30 DAY)
// GROUP BY date, marketplace
// ORDER BY date, marketplace;

// 3. CONSULTA PARA OBTENER TICKET PROMEDIO
// $avgTicketData = [];
// Ejemplo de SQL:
// SELECT AVG(`Precio con Descuento`) as avg_price, SUBSTRING_INDEX(FROM_TABLE, '_', 2) as marketplace 
// FROM (
//   SELECT 'MKP_FALABELLA' as FROM_TABLE, `Precio con Descuento` FROM MKP_FALABELLA
//   UNION ALL SELECT 'MKP_MERCADO_LIBRE' as FROM_TABLE, `Precio con Descuento` FROM MKP_MERCADO_LIBRE
//   UNION ALL SELECT 'MKP_PARIS' as FROM_TABLE, `Precio con Descuento` FROM MKP_PARIS
//   UNION ALL SELECT 'MKP_RIPLEY' as FROM_TABLE, `Precio con Descuento` FROM MKP_RIPLEY
//   UNION ALL SELECT 'MKP_WALLMART' as FROM_TABLE, `Precio con Descuento` FROM MKP_WALLMART
// ) combined
// GROUP BY marketplace
// ORDER BY avg_price DESC;

// 4. CONSULTA PARA OBTENER TOP PRODUCTOS
// $topProductsData = [];
// Ejemplo de SQL:
// SELECT COUNT(*) as count, `SKU`, `Nombre Producto`, SUBSTRING_INDEX(FROM_TABLE, '_', 2) as marketplace 
// FROM (
//   SELECT 'MKP_FALABELLA' as FROM_TABLE, `SKU`, `Nombre Producto` FROM MKP_FALABELLA
//   UNION ALL SELECT 'MKP_MERCADO_LIBRE' as FROM_TABLE, `SKU`, `Nombre Producto` FROM MKP_MERCADO_LIBRE
//   UNION ALL SELECT 'MKP_PARIS' as FROM_TABLE, `SKU`, `Nombre Producto` FROM MKP_PARIS
//   UNION ALL SELECT 'MKP_RIPLEY' as FROM_TABLE, `SKU`, `Nombre Producto` FROM MKP_RIPLEY
//   UNION ALL SELECT 'MKP_WALLMART' as FROM_TABLE, `SKU`, `Nombre Producto` FROM MKP_WALLMART
// ) combined
// GROUP BY `SKU`
// ORDER BY count DESC
// LIMIT 10;

// 5. CONSULTA PARA OBTENER DATOS DE TRANSPORTISTAS
// $carriersData = [];
// Ejemplo de SQL:
// SELECT COUNT(*) as count, `Transportista` 
// FROM (
//   SELECT `Transportista` FROM MKP_FALABELLA
//   UNION ALL SELECT `Transportista` FROM MKP_MERCADO_LIBRE
//   UNION ALL SELECT `Transportista` FROM MKP_PARIS
//   UNION ALL SELECT `Transportista` FROM MKP_RIPLEY
//   UNION ALL SELECT `Transportista` FROM MKP_WALLMART
// ) combined
// GROUP BY `Transportista`
// ORDER BY count DESC;

// 6. CONSULTA PARA OBTENER MÉTRICAS FINANCIERAS
// $financialMetrics = [];
// Ejemplo de SQL para total de ventas:
// SELECT SUM(`Monto Total Factura`) as total_sales, 
//        SUBSTRING_INDEX(FROM_TABLE, '_', 2) as marketplace,
//        COUNT(CASE WHEN `Estado Del Pago` = 'Pendiente' THEN 1 END) as pending_count,
//        SUM(CASE WHEN `Estado Del Pago` = 'Pendiente' THEN `Monto Total Factura` ELSE 0 END) as pending_amount,
//        AVG(`Impuesto`/`Base Imponible`*100) as tax_rate
// FROM (
//   SELECT 'MKP_FALABELLA' as FROM_TABLE, `Monto Total Factura`, `Estado Del Pago`, `Impuesto`, `Base Imponible` FROM MKP_FALABELLA
//   UNION ALL SELECT 'MKP_MERCADO_LIBRE' as FROM_TABLE, `Monto Total Factura`, `Estado Del Pago`, `Impuesto`, `Base Imponible` FROM MKP_MERCADO_LIBRE
//   UNION ALL SELECT 'MKP_PARIS' as FROM_TABLE, `Monto Total Factura`, `Estado Del Pago`, `Impuesto`, `Base Imponible` FROM MKP_PARIS
//   UNION ALL SELECT 'MKP_RIPLEY' as FROM_TABLE, `Monto Total Factura`, `Estado Del Pago`, `Impuesto`, `Base Imponible` FROM MKP_RIPLEY
//   UNION ALL SELECT 'MKP_WALLMART' as FROM_TABLE, `Monto Total Factura`, `Estado Del Pago`, `Impuesto`, `Base Imponible` FROM MKP_WALLMART
// ) combined
// GROUP BY marketplace WITH ROLLUP;

// 7. CONSULTA PARA OBTENER MAPA DE CALOR POR HORA/DÍA
// $heatmapData = [];
// Ejemplo de SQL:
// SELECT COUNT(*) as count, 
//        DAYOFWEEK(`Fecha de Creación`) as day_of_week,
//        HOUR(`Fecha de Creación`) as hour_of_day,
//        SUBSTRING_INDEX(FROM_TABLE, '_', 2) as marketplace
// FROM (
//   SELECT 'MKP_FALABELLA' as FROM_TABLE, `Fecha de Creación` FROM MKP_FALABELLA
//   UNION ALL SELECT 'MKP_MERCADO_LIBRE' as FROM_TABLE, `Fecha de Creación` FROM MKP_MERCADO_LIBRE
//   UNION ALL SELECT 'MKP_PARIS' as FROM_TABLE, `Fecha de Creación` FROM MKP_PARIS
//   UNION ALL SELECT 'MKP_RIPLEY' as FROM_TABLE, `Fecha de Creación` FROM MKP_RIPLEY
//   UNION ALL SELECT 'MKP_WALLMART' as FROM_TABLE, `Fecha de Creación` FROM MKP_WALLMART
// ) combined
// GROUP BY day_of_week, hour_of_day, marketplace
// ORDER BY day_of_week, hour_of_day, marketplace;

// Preparar la estructura de datos para los gráficos
$marketplaceData = [];
foreach ($data as $row) {
    $tableName = $row['TABLE_NAME'] ?? $row['table_name'] ?? 'N/A';
    $displayName = str_replace('MKP_', '', $tableName);
    $displayName = ucfirst(strtolower($displayName)); // Convertir a formato de título
    
    $marketplaceData[] = [
        'name' => $tableName,
        'displayName' => $displayName,
        'records' => intval($row['TABLE_ROWS'] ?? $row['table_rows'] ?? 0),
        'updated' => ($row['UPDATE_TIME'] ?? $row['update_time'] ?? 'N/A') !== 'N/A' 
            ? date('d/m/Y', strtotime($row['UPDATE_TIME'] ?? $row['update_time'])) 
            : 'N/A'
    ];
}

// Codificar los datos para usar en JavaScript
$marketplaceDataJson = json_encode($marketplaceData);

// Estos JSON estarían disponibles si implementas las consultas mencionadas arriba
// $fulfillmentDataJson = json_encode($fulfillmentData ?? []);
// $salesTrendDataJson = json_encode($salesTrendData ?? []);
// $avgTicketDataJson = json_encode($avgTicketData ?? []);
// $topProductsDataJson = json_encode($topProductsData ?? []);
// $carriersDataJson = json_encode($carriersData ?? []);
// $financialMetricsJson = json_encode($financialMetrics ?? []);
// $heatmapDataJson = json_encode($heatmapData ?? []);
?>

<div class="dashboard-container">
    <div class="dashboard-header">
        <div class="header-content">
            <h1 class="dashboard-title">
                <i class="fas fa-database"></i>
                <span>RESUMEN DE VENTAS</span>
            </h1>
        </div>
    </div>

    <?php if (!empty($data)): ?>
        <!-- Tarjetas de estadísticas -->
        <div class="stats-overview">
            <div class="stats-card total-tables">
                <div class="stats-icon">
                    <i class="fas fa-table"></i>
                </div>
                <div class="stats-info">
                    <h3><?= count($data) ?></h3>
                    <p>MARKETPLACES</p>
                </div>
            </div>
            
            <?php 
                $totalRows = 0;
                $latestUpdate = null;
                
                foreach ($data as $row) {
                    $rowCount = $row['TABLE_ROWS'] ?? $row['table_rows'] ?? 0;
                    $totalRows += intval($rowCount);
                    
                    $updateTime = $row['UPDATE_TIME'] ?? $row['update_time'] ?? null;
                    if ($updateTime && (!$latestUpdate || strtotime($updateTime) > strtotime($latestUpdate))) {
                        $latestUpdate = $updateTime;
                    }
                }
            ?>
            
            <div class="stats-card total-records">
                <div class="stats-icon">
                    <i class="fas fa-list"></i>
                </div>
                <div class="stats-info">
                    <h3><?= number_format($totalRows) ?></h3>
                    <p>Registros totales</p>
                </div>
            </div>
            
            <div class="stats-card largest-table">
                <?php
                    $largestTable = null;
                    $maxRows = 0;
                    
                    foreach ($data as $row) {
                        $rowCount = $row['TABLE_ROWS'] ?? $row['table_rows'] ?? 0;
                        if ($rowCount > $maxRows) {
                            $maxRows = $rowCount;
                            $largestTable = $row['TABLE_NAME'] ?? $row['table_name'] ?? 'N/A';
                        }
                    }
                ?>
                <div class="stats-icon">
                    <i class="fas fa-chart-bar"></i>
                </div>
                <div class="stats-info">
                    <h3><?= $this->escapeHtml($largestTable) ?></h3>
                    <p>Tabla más grande</p>
                </div>
            </div>
            
            <div class="stats-card last-update">
                <div class="stats-icon">
                    <i class="fas fa-clock"></i>
                </div>
                <div class="stats-info">
                    <h3><?= $latestUpdate ? date('d/m/Y H:i', strtotime($latestUpdate)) : 'N/A' ?></h3>
                    <p>Última actualización</p>
                </div>
            </div>
        </div>

        <!-- Búsqueda de tablas -->
        <div class="search-container">
            <div class="search-box">
                <i class="fas fa-search"></i>
                <input type="text" id="table-search" placeholder="Buscar en tablas MKP...">
            </div>
        </div>

        <!-- Tarjetas de tablas -->
        <div class="tables-grid" id="tables-container">
            <?php foreach ($data as $row): 
                $tableName  = $row['TABLE_NAME']   ?? $row['table_name']   ?? 'N/A';
                $engine     = $row['ENGINE']       ?? $row['engine']       ?? 'N/A';
                $tableRows  = $row['TABLE_ROWS']   ?? $row['table_rows']   ?? 0;
                $createTime = $row['CREATE_TIME']  ?? $row['create_time']  ?? 'N/A';
                $updateTime = $row['UPDATE_TIME']  ?? $row['update_time']  ?? 'N/A';
                
                // Calcular tamaño relativo para la barra de progreso
                $percentRows = ($maxRows > 0) ? ($tableRows / $maxRows) * 100 : 0;
            ?>
                <div class="table-card" data-table-name="<?= strtolower($tableName) ?>">
                    <div class="table-card-header">
                        <h3 class="table-name">
                            <i class="fas fa-table"></i>
                            <?= $this->escapeHtml($tableName) ?>
                        </h3>
                        <span class="engine-badge"><?= $this->escapeHtml($engine) ?></span>
                    </div>
                    <div class="table-card-body">
                        <div class="info-row">
                            <div class="info-label">Registros:</div>
                            <div class="info-value"><?= number_format($tableRows) ?></div>
                        </div>
                        <div class="progress-container">
                            <div class="progress-bar" style="width: <?= $percentRows ?>%"></div>
                        </div>
                        <div class="info-row">
                            <div class="info-label">Creación:</div>
                            <div class="info-value">
                                <?= $createTime !== 'N/A' ? date('d/m/Y', strtotime($createTime)) : 'N/A' ?>
                            </div>
                        </div>
                        <div class="info-row">
                            <div class="info-label">Actualización:</div>
                            <div class="info-value">
                                <?= $updateTime !== 'N/A' ? date('d/m/Y', strtotime($updateTime)) : 'N/A' ?>
                            </div>
                        </div>
                    </div>
                    <div class="table-card-footer">
                        <a class="view-details-btn" href="<?= $this->url('application', ['action' => 'detail', 'table' => $tableName]) ?>">
                            <i class="fas fa-eye"></i> Ver detalles
                        </a>
                    </div>
                </div>
            <?php endforeach; ?>
        </div>
        
    
        
        <!-- Modal para vista de gráfico a pantalla completa -->
        <div class="chart-modal" id="chartModal">
            <div class="chart-modal-content">
                <div class="chart-modal-header">
                    <h3 id="modalChartTitle">Título del gráfico</h3>
                    <button class="close-modal" id="closeChartModal">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div class="chart-modal-body">
                    <canvas id="modalChart"></canvas>
                </div>
            </div>
        </div>
    <?php else: ?>
        <div class="empty-state">
            <div class="empty-icon">
                <i class="fas fa-database"></i>
            </div>
            <h2>No hay tablas MKP disponibles</h2>
            <p>No se encontraron tablas con el prefijo "MKP" en la base de datos.</p>
        </div>
    <?php endif; ?>
</div>

<!-- Incluir Font Awesome y Google Fonts -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap">

<!-- Incluir Chart.js desde CDN -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<!-- Extensión para gráficos de matriz (heatmap) -->
<script src="https://cdn.jsdelivr.net/npm/chartjs-chart-matrix@1.2.0/dist/chartjs-chart-matrix.min.js"></script>

<!-- Estilos para el dashboard -->
<style>
:root {
    /* Colores */
    --primary: #4361ee;
    --primary-light: #4895ef;
    --primary-dark: #3f37c9;
    --secondary: #6c757d;
    --success: #4caf50;
    --danger: #f44336;
    --warning: #ff9800;
    --info: #2196f3;
    --dark: #212529;
    --light: #f8f9fa;
    --white: #ffffff;
    --body-bg: #f5f7fb;
    --card-bg: #ffffff;
    --border-color: #e0e6ed;
    --text-main: #3b3f5c;
    --text-muted: #6c757d;
    --shadow-sm: 0 2px 5px rgba(0, 0, 0, 0.05);
    --shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
    --shadow-lg: 0 1rem 3rem rgba(0, 0, 0, 0.175);

    /* Fuentes */
    --font-family: 'Inter', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
    --border-radius: 0.5rem;
    --transition-speed: 0.3s;
}

/* Estilos base */
* {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}

body {
    font-family: var(--font-family);
    background-color: var(--body-bg);
    color: var(--text-main);
    line-height: 1.6;
    overflow-x: hidden;
}

/* Contenedor principal */
.dashboard-container {
    width: 100%;
    max-width: 1400px;
    margin: 0 auto;
    padding: 1.5rem;
}

/* Encabezado del dashboard */
.dashboard-header {
    margin-bottom: 2rem;
}

.header-content {
    text-align: center;
}

.dashboard-title {
    font-size: 2rem;
    font-weight: 700;
    color: var(--dark);
    margin: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.75rem;
}

.dashboard-title i {
    color: var(--primary);
}

/* Tarjetas de estadísticas */
.stats-overview {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
}

.stats-card {
    background-color: var(--card-bg);
    border-radius: var(--border-radius);
    box-shadow: var(--shadow-sm);
    padding: 1.5rem;
    display: flex;
    align-items: center;
    gap: 1.25rem;
    transition: transform var(--transition-speed), box-shadow var(--transition-speed);
}

.stats-card:hover {
    transform: translateY(-5px);
    box-shadow: var(--shadow);
}

.stats-icon {
    width: 3rem;
    height: 3rem;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.5rem;
    color: white;
}

.total-tables .stats-icon {
    background-color: var(--primary);
}

.total-records .stats-icon {
    background-color: var(--success);
}

.largest-table .stats-icon {
    background-color: var(--warning);
}

.last-update .stats-icon {
    background-color: var(--info);
}

.stats-info h3 {
    font-size: 1.5rem;
    font-weight: 700;
    margin: 0;
    line-height: 1.2;
    color: var(--dark);
}

.stats-info p {
    margin: 0;
    color: var(--text-muted);
    font-size: 0.875rem;
}

/* Búsqueda */
.search-container {
    margin-bottom: 1.5rem;
}

.search-box {
    position: relative;
    max-width: 400px;
    margin: 0 auto;
}

.search-box i {
    position: absolute;
    left: 1rem;
    top: 50%;
    transform: translateY(-50%);
    color: var(--text-muted);
}

.search-box input {
    width: 100%;
    padding: 0.75rem 1rem 0.75rem 2.5rem;
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius);
    font-size: 0.95rem;
    transition: all var(--transition-speed);
}

.search-box input:focus {
    outline: none;
    border-color: var(--primary);
    box-shadow: 0 0 0 0.25rem rgba(67, 97, 238, 0.25);
}

/* Rejilla de tarjetas de tablas */
.tables-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
}

.table-card {
    background-color: var(--card-bg);
    border-radius: var(--border-radius);
    box-shadow: var(--shadow-sm);
    overflow: hidden;
    transition: transform var(--transition-speed), box-shadow var(--transition-speed);
    height: 100%;
    display: flex;
    flex-direction: column;
    border-top: 4px solid var(--primary);
}

.table-card:hover {
    transform: translateY(-5px);
    box-shadow: var(--shadow);
}

.table-card-header {
    padding: 1.25rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-bottom: 1px solid var(--border-color);
}

.table-name {
    font-size: 1.25rem;
    font-weight: 600;
    margin: 0;
    color: var(--dark);
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.table-name i {
    color: var(--primary);
    font-size: 1rem;
}

.engine-badge {
    background-color: rgba(67, 97, 238, 0.1);
    color: var(--primary);
    padding: 0.25rem 0.75rem;
    border-radius: 2rem;
    font-size: 0.75rem;
    font-weight: 500;
}

.table-card-body {
    padding: 1.25rem;
    flex-grow: 1;
}

.info-row {
    display: flex;
    justify-content: space-between;
    margin-bottom: 0.5rem;
}

.info-label {
    font-weight: 500;
    color: var(--text-muted);
}

.info-value {
    font-weight: 500;
    color: var(--dark);
}

.progress-container {
    height: 6px;
    background-color: #f0f0f0;
    border-radius: 3px;
    margin: 1rem 0;
    overflow: hidden;
}

.progress-bar {
    height: 100%;
    background: linear-gradient(to right, var(--primary-light), var(--primary-dark));
    border-radius: 3px;
    transition: width 1s ease-in-out;
}

.table-card-footer {
    padding: 1.25rem;
    border-top: 1px solid var(--border-color);
}

.view-details-btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    padding: 0.625rem 1.25rem;
    background-color: var(--primary);
    color: white;
    border-radius: var(--border-radius);
    text-decoration: none;
    font-weight: 500;
    transition: all var(--transition-speed);
    gap: 0.5rem;
}

.view-details-btn:hover {
    background-color: var(--primary-dark);
    transform: translateY(-2px);
    box-shadow: var(--shadow-sm);
}

/* Sección de gráficos avanzados */
.advanced-charts-section {
    margin-top: 3rem;
}

.section-title {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    font-size: 1.5rem;
    margin-bottom: 1.5rem;
    color: var(--dark);
    border-bottom: 2px solid var(--border-color);
    padding-bottom: 0.75rem;
}

.section-title i {
    color: var(--primary);
}

.charts-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 1.5rem;
    margin-bottom: 3rem;
}

.chart-card {
    background-color: var(--card-bg);
    border-radius: var(--border-radius);
    box-shadow: var(--shadow-sm);
    overflow: hidden;
    transition: transform var(--transition-speed), box-shadow var(--transition-speed);
    height: 100%;
    display: flex;
    flex-direction: column;
}

.chart-card:hover {
    transform: translateY(-5px);
    box-shadow: var(--shadow);
}

.chart-header {
    background-color: var(--primary);
    color: white;
    padding: 1rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.chart-header h3 {
    margin: 0;
    font-size: 1.1rem;
    font-weight: 500;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.chart-actions {
    display: flex;
    gap: 0.5rem;
    align-items: center;
}

.chart-action-btn {
    background: rgba(255, 255, 255, 0.2);
    border: none;
    color: white;
    border-radius: 4px;
    width: 32px;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: background-color var(--transition-speed);
}

.chart-action-btn:hover {
    background: rgba(255, 255, 255, 0.3);
}

.chart-body {
    padding: 1.25rem;
    flex-grow: 1;
    min-height: 300px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.chart-footer {
    padding: 1rem;
    border-top: 1px solid var(--border-color);
    background-color: rgba(0, 0, 0, 0.02);
}

.chart-description {
    margin: 0;
    font-size: 0.875rem;
    color: var(--text-muted);
    text-align: center;
}

/* Placeholder para datos pendientes */
.data-placeholder {
    text-align: center;
    padding: 2rem;
    color: var(--text-muted);
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: 1rem;
    background-color: rgba(0, 0, 0, 0.02);
    border-radius: var(--border-radius);
    border: 1px dashed var(--border-color);
    width: 100%;
    height: 100%;
}

.data-placeholder i {
    font-size: 2.5rem;
    opacity: 0.5;
}

.data-placeholder p {
    font-size: 0.9rem;
    max-width: 250px;
}

.placeholder-text {
    color: var(--text-muted);
    font-size: 0.9rem;
    font-style: italic;
}

/* Modal de gráfico a pantalla completa */
.chart-modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.75);
    z-index: 2000;
    align-items: center;
    justify-content: center;
}

.chart-modal.open {
    display: flex;
}

.chart-modal-content {
    background-color: var(--card-bg);
    border-radius: var(--border-radius);
    width: 90%;
    max-width: 1200px;
    height: 90%;
    max-height: 800px;
    display: flex;
    flex-direction: column;
    box-shadow: var(--shadow-lg);
}

.chart-modal-header {
    padding: 1.25rem;
    border-bottom: 1px solid var(--border-color);
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.chart-modal-header h3 {
    margin: 0;
    font-size: 1.25rem;
    color: var(--dark);
}

.close-modal {
    background: none;
    border: none;
    color: var(--text-muted);
    font-size: 1.25rem;
    cursor: pointer;
    width: 36px;
    height: 36px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all var(--transition-speed);
}

.close-modal:hover {
    background-color: rgba(0, 0, 0, 0.05);
    color: var(--dark);
}

.chart-modal-body {
    flex-grow: 1;
    padding: 1.5rem;
    overflow: hidden;
}

/* Sección de métricas */
.metrics-section {
    margin-bottom: 3rem;
}

.metrics-grid {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 1.5rem;
}

.metric-card {
    background-color: var(--card-bg);
    border-radius: var(--border-radius);
    box-shadow: var(--shadow-sm);
    padding: 1.5rem;
    display: flex;
    align-items: center;
    gap: 1.25rem;
    transition: transform var(--transition-speed), box-shadow var(--transition-speed);
    position: relative;
    overflow: hidden;
}

.metric-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 4px;
    height: 100%;
}

.metric-card.primary::before {
    background-color: var(--primary);
}

.metric-card.success::before {
    background-color: var(--success);
}

.metric-card.warning::before {
    background-color: var(--warning);
}

.metric-card.info::before {
    background-color: var(--info);
}

.metric-card:hover {
    transform: translateY(-5px);
    box-shadow: var(--shadow);
}

.metric-icon {
    width: 3rem;
    height: 3rem;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.5rem;
    flex-shrink: 0;
}

.metric-card.primary .metric-icon {
    background-color: rgba(67, 97, 238, 0.1);
    color: var(--primary);
}

.metric-card.success .metric-icon {
    background-color: rgba(76, 175, 80, 0.1);
    color: var(--success);
}

.metric-card.warning .metric-icon {
    background-color: rgba(255, 152, 0, 0.1);
    color: var(--warning);
}

.metric-card.info .metric-icon {
    background-color: rgba(33, 150, 243, 0.1);
    color: var(--info);
}

.metric-content {
    flex-grow: 1;
}

.metric-title {
    font-size: 0.875rem;
    font-weight: 500;
    color: var(--text-muted);
    margin: 0 0 0.5rem 0;
}

.metric-value {
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--dark);
    margin-bottom: 0.25rem;
}

.metric-description {
    font-size: 0.75rem;
    color: var(--text-muted);
}

/* Selectores para filtros */
.chart-filter {
    margin-right: 0.5rem;
}

.chart-select {
    background-color: rgba(255, 255, 255, 0.2);
    color: white;
    border: none;
    border-radius: 4px;
    padding: 0.25rem 0.5rem;
    font-size: 0.8rem;
    appearance: none;
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='8' height='4' viewBox='0 0 8 4'%3E%3Cpath fill='%23ffffff' d='M0 0l4 4 4-4z'/%3E%3C/svg%3E");
    background-repeat: no-repeat;
    background-position: right 0.5rem center;
    padding-right: 1.5rem;
    cursor: pointer;
}

.chart-select:focus {
    outline: none;
    box-shadow: 0 0 0 2px rgba(255, 255, 255, 0.5);
}

/* Sección de mapas de calor */
.heatmap-section {
    margin-top: 2rem;
    margin-bottom: 2.5rem;
}

/* Sección de entidades principales */
.top-entities-section {
    margin-top: 2rem;
    margin-bottom: 3rem;
}

/* Estado vacío */
.empty-state {
    text-align: center;
    padding: 4rem 2rem;
    background-color: var(--card-bg);
    border-radius: var(--border-radius);
    box-shadow: var(--shadow);
}

.empty-icon {
    font-size: 4rem;
    color: var(--text-muted);
    margin-bottom: 1.5rem;
}

.empty-state h2 {
    font-size: 1.5rem;
    font-weight: 600;
    margin-bottom: 1rem;
    color: var(--dark);
}

.empty-state p {
    color: var(--text-muted);
    max-width: 500px;
    margin: 0 auto;
}

/* Responsividad */
@media (max-width: 1200px) {
    .charts-grid, .metrics-grid {
        grid-template-columns: repeat(2, 1fr);
    }
}

@media (max-width: 768px) {
    .dashboard-title {
        font-size: 1.5rem;
    }
    
    .stats-card {
        padding: 1.25rem;
    }
    
    .stats-icon {
        width: 2.5rem;
        height: 2.5rem;
        font-size: 1.25rem;
    }
    
    .stats-info h3 {
        font-size: 1.25rem;
    }
    
    .tables-grid, .charts-grid, .metrics-grid {
        grid-template-columns: 1fr;
    }
    
    .chart-body {
        height: 300px;
    }
    
    .section-title {
        font-size: 1.25rem;
    }
    
    .metric-card {
        padding: 1.25rem;
    }
    
    .metric-icon {
        width: 2.5rem;
        height: 2.5rem;
    }
    
    .metric-value {
        font-size: 1.25rem;
    }
}
</style>

<script>
document.addEventListener("DOMContentLoaded", function() {
    // Animación de entrada
    const cards = document.querySelectorAll('.table-card, .stats-card, .metric-card');
    cards.forEach((card, index) => {
        card.style.opacity = '0';
        card.style.transform = 'translateY(20px)';
        
        setTimeout(() => {
            card.style.transition = 'opacity 0.5s ease, transform 0.5s ease';
            card.style.opacity = '1';
            card.style.transform = 'translateY(0)';
        }, 100 + (index * 50));
    });
    
    // Búsqueda de tablas
    const searchInput = document.getElementById('table-search');
    const tablesContainer = document.getElementById('tables-container');
    
    if (searchInput && tablesContainer) {
        const tableCards = tablesContainer.querySelectorAll('.table-card');
        
        searchInput.addEventListener('keyup', function() {
            const searchTerm = this.value.toLowerCase();
            
            tableCards.forEach(card => {
                const tableName = card.getAttribute('data-table-name');
                
                if (tableName.includes(searchTerm)) {
                    card.style.display = 'flex';
                } else {
                    card.style.display = 'none';
                }
            });
        });
    }
    
    // ============ GRÁFICOS AVANZADOS ============
    
    // Obtener los datos reales del PHP
    const marketplaceData = <?= $marketplaceDataJson ?>;
    
    // Renderizar el gráfico que podemos con los datos disponibles
    renderMarketplaceComparisonChart();
    
    // Configurar eventos
    setupModalEvents();
    setupFilterEvents();
    
    /**
     * Renderiza el gráfico de comparación de volumen por marketplace
     */
    function renderMarketplaceComparisonChart() {
        const ctx = document.getElementById('mkpComparisonChart');
        if (!ctx) return;
        
        // Preparar datos
        const labels = marketplaceData.map(mkp => mkp.displayName);
        const values = marketplaceData.map(mkp => mkp.records);
        
        // Colores personalizados por marketplace
        const marketplaceColors = {
            "Falabella": "rgba(10, 74, 144, 0.7)",   // Azul Falabella
            "Mercado_libre": "rgba(255, 233, 0, 0.7)", // Amarillo ML
            "Paris": "rgba(231, 23, 133, 0.7)",      // Rosa Paris
            "Ripley": "rgba(237, 28, 36, 0.7)",      // Rojo Ripley
            "Wallmart": "rgba(0, 125, 198, 0.7)"     // Azul Walmart
        };
        
        const backgroundColor = labels.map(label => {
            // Buscar el color apropiado
            for (const [key, value] of Object.entries(marketplaceColors)) {
                if (label.toLowerCase().includes(key.toLowerCase())) {
                    return value;
                }
            }
            return "rgba(67, 97, 238, 0.7)"; // Color por defecto
        });
        
        const borderColor = backgroundColor.map(color => color.replace("0.7", "1"));
        
        // Crear el gráfico
        window.mkpComparisonChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Número de registros',
                    data: values,
                    backgroundColor: backgroundColor,
                    borderColor: borderColor,
                    borderWidth: 1,
                    borderRadius: 4,
                    maxBarThickness: 50
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                return `Registros: ${context.raw.toLocaleString()}`;
                            }
                        }
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            callback: function(value) {
                                return value.toLocaleString();
                            }
                        }
                    }
                },
                animation: {
                    duration: 2000
                }
            }
        });
    }
    
    /**
     * Configura eventos para modales
     */
    function setupModalEvents() {
        const chartModal = document.getElementById('chartModal');
        const modalChart = document.getElementById('modalChart');
        const modalTitle = document.getElementById('modalChartTitle');
        const closeBtn = document.getElementById('closeChartModal');
        
        if (!chartModal || !modalChart || !modalTitle || !closeBtn) return;
        
        // Configurar botones de pantalla completa
        const fullscreenButtons = [
            { id: 'mkpComparisonFullscreen', chartId: 'mkpComparisonChart', title: 'Volumen de registros por Marketplace' }
        ];
        
        fullscreenButtons.forEach(button => {
            const btnElement = document.getElementById(button.id);
            if (btnElement) {
                btnElement.addEventListener('click', function() {
                    openChartInModal(button.chartId, button.title);
                });
            }
        });
        
        // Cerrar modal
        closeBtn.addEventListener('click', function() {
            chartModal.classList.remove('open');
        });
        
        // Función para abrir un gráfico en el modal
        function openChartInModal(chartId, title) {
            modalTitle.textContent = title;
            chartModal.classList.add('open');
            
            // Obtener la configuración del gráfico original
            const sourceChart = window[chartId];
            if (!sourceChart) return;
            
            // Si ya hay un gráfico en el modal, destruirlo
            if (window.modalChartInstance) {
                window.modalChartInstance.destroy();
            }
            
            // Crear una nueva instancia del gráfico en el modal
            window.modalChartInstance = new Chart(modalChart, {
                type: sourceChart.config.type,
                data: JSON.parse(JSON.stringify(sourceChart.data)),
                options: JSON.parse(JSON.stringify(sourceChart.options))
            });
        }
    }
    
    /**
     * Configura eventos para filtros
     */
    function setupFilterEvents() {
        const heatmapFilter = document.getElementById('heatmapMarketplaceFilter');
        
        if (heatmapFilter) {
            heatmapFilter.addEventListener('change', function() {
                const selectedMarketplace = this.value;
                console.log(`Filtro cambiado a: ${selectedMarketplace}`);
            });
        }
    }
});
</script>