<?php
    /**
     * Detail view.
     *
     * @var Laminas\View\Renderer\PhpRenderer $this
     * @var string $table       Nombre de la tabla.
     * @var array  $data        Datos (filas) de la tabla.
     * @var int    $page        Página actual.
     * @var int    $limit       Límites por página.
     * @var int    $totalPages  Total de páginas.
     * @var int    $total       Total de registros.
     * @var string $search      Término de búsqueda global.
     * @var array  $filters     Filtros aplicados.
     * 
     * Variables para KPIs y gráficos:
     * @var float $ventaBrutaMensual
     * @var float $impuestoBrutoMensual
     * @var int $totalTransaccionesMes
     * @var float $valorCancelado
     * @var int $transaccionesCanceladas
     * @var float $totalVentas
     * @var int $totalRegistros
     * @var string $jsonVentasAnuales
     * @var string $jsonTopProductos
     */

    // Asegurarse de que todas las variables KPI existan
    if (!isset($ventaBrutaMensual)) $ventaBrutaMensual = 0;
    if (!isset($impuestoBrutoMensual)) $impuestoBrutoMensual = 0;
    if (!isset($totalTransaccionesMes)) $totalTransaccionesMes = 0;
    if (!isset($valorCancelado)) $valorCancelado = 0;
    if (!isset($transaccionesCanceladas)) $transaccionesCanceladas = 0;
    if (!isset($totalVentas)) $totalVentas = 0;
    if (!isset($totalRegistros)) $totalRegistros = $total ?? 0;
    if (!isset($jsonVentasAnuales)) $jsonVentasAnuales = '[]';
    if (!isset($jsonTopProductos)) $jsonTopProductos = '[]';

    // Función para formatear los nombres de las columnas
    function formatColumnName($column) {
        // Mapeo específico para ciertos campos
        $specialCases = [
            'id' => 'ID',
            'id_documento' => 'ID Documento',
            'precio_despues_descuento' => 'Precio con Descuento',
            'nombre_estado' => 'Estado',
            'numero_documento_cliente' => 'Documento Cliente',
            'codigo_sku' => 'SKU',
            'numero_boleta' => 'N° Boleta',
            'tipo_factura_origen' => 'Tipo de Factura',
            'base_imponible' => 'Base Imponible',
            'precio_sin_impuesto' => 'Precio sin Impuesto',
            'fecha_creacion' => 'Fecha de Creación'
        ];
        
        // Si existe en casos especiales, retornar el nombre personalizado
        if (array_key_exists($column, $specialCases)) {
            return $specialCases[$column];
        }
        
        // Convertir guiones bajos a espacios y capitalizar cada palabra
        $words = explode('_', $column);
        $words = array_map('ucfirst', $words);
        return implode(' ', $words);
    }

    // Función para formatear fechas a DD/MM/AAAA
    function formatDateForDisplay($dateString) {
        if (empty($dateString)) {
            return '';
        }
        
        // Intentar convertir la fecha con diferentes formatos posibles
        $formats = ['Y-m-d H:i:s', 'Y-m-d H:i', 'Y-m-d'];
        $timestamp = false;
        
        foreach ($formats as $format) {
            $date = DateTime::createFromFormat($format, $dateString);
            if ($date !== false) {
                $timestamp = $date->getTimestamp();
                break;
            }
        }
        
        if ($timestamp === false) {
            // Si no se pudo parsear con los formatos anteriores, intentar con strtotime
            $timestamp = strtotime($dateString);
        }
        
        // Si se pudo convertir, formatear como DD/MM/AAAA
        if ($timestamp !== false) {
            return date('d/m/Y', $timestamp);
        }
        
        // Si no se pudo convertir, devolver la cadena original
        return $dateString;
    }

    // Función para determinar si un campo es tipo fecha basado en su nombre
    function isDateField($fieldName) {
        return preg_match('/(fecha|date|time|created|updated|modificado|creado)/i', $fieldName);
    }
    ?>
    <!DOCTYPE html>
    <html lang="es">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Detalle de <?= $this->escapeHtml($table) ?></title>
        
        <!-- Solo CSS en el head -->
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
        <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap">
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.13.2/themes/base/jquery-ui.min.css">
        <link rel="stylesheet" href="<?= $this->basePath('css/styles.css') ?>">
    </head>
    <body>

    <div class="dashboard-container">
        <!-- Resumen de información -->
        <div class="info-summary">
            <div class="summary-card">
                <div class="summary-header">
                    <i class="fas fa-info-circle"></i>
                    <h3>Resumen de Información</h3>
                </div>
                <div class="summary-content">
                    <div class="summary-item">
                        <span class="summary-label">Tabla:</span>
                        <span class="summary-value"><?= $this->escapeHtml($table) ?></span>
                    </div>
                    <div class="summary-item">
                        <span class="summary-label">Total de registros:</span>
                        <span class="summary-value"><?= $total ?></span>
                    </div>
                    <div class="summary-item">
                        <span class="summary-label">Página actual:</span>
                        <span class="summary-value"><?= $page ?> de <?= $totalPages ?></span>
                    </div>
                    <div class="summary-item">
                        <span class="summary-label">Registros por página:</span>
                        <span class="summary-value"><?= $limit ?></span>
                    </div>
                </div>
            </div>
        </div>

        <div class="dashboard-header">
            <div class="header-content">
                <h1 class="page-title">
                    <i class="fas fa-table"></i>
                    <span class="title-text"><?= $this->escapeHtml($table) ?></span>
                </h1>
                <div class="action-buttons">
                    <button class="btn btn-primary" id="toggle-filters">
                        <i class="fas fa-filter"></i>
                        <span>Filtros</span>
                    </button>
                    <button class="btn btn-secondary" id="clear-filters">
                        <i class="fas fa-eraser"></i>
                        <span>Limpiar</span>
                    </button>
                    <button class="btn btn-success" id="export-csv">
                        <i class="fas fa-download"></i>
                        <span>Exportar</span>
                    </button>
                </div>
            </div>
        </div>

        <div class="dashboard-content">
            <!-- Dashboard de resumen con KPIs y gráficos -->
            <?php if (!empty($data) && (stripos($table, 'paris') !== false || stripos($table, 'mkp') !== false)): ?>
                <!-- Tarjetas de KPIs -->
                <div class="kpi-container">

                <!-- Venta Bruta Mensual -->
                <div class="kpi-card kpi-bruta">
                    <div class="kpi-icon"><i class="fas fa-dollar-sign"></i></div>
                    <div class="kpi-content">
                        <h3 class="kpi-title">Venta Bruta Mensual</h3>
                        <div class="kpi-value">$ 0</div>
                        <div class="kpi-description">0 transacciones este mes</div>
                    </div>
                </div>

                <!-- Impuesto -->
                <div class="kpi-card kpi-impuesto">
                    <div class="kpi-icon"><i class="fas fa-percentage"></i></div>
                    <div class="kpi-content">
                        <h3 class="kpi-title">Impuesto Bruto Mensual</h3>
                        <div class="kpi-value">$ 0</div>
                        <div class="kpi-description">IVA de ventas mensuales</div>
                    </div>
                </div>

                <!-- Ventas Totales -->
                <div class="kpi-card kpi-total">
                    <div class="kpi-icon"><i class="fas fa-chart-line"></i></div>
                    <div class="kpi-content">
                        <h3 class="kpi-title">Ventas Totales Mensual</h3>
                        <div class="kpi-value">$ 0</div>
                        <div class="kpi-description">0 transacciones totales</div>
                    </div>
                </div>

                <!-- Canceladas -->
                <div class="kpi-card kpi-canceladas" style="border-left-color: #f44336;">
                    <div class="kpi-icon" style="color: #f44336;"><i class="fas fa-ban"></i></div>
                    <div class="kpi-content">
                        <h3 class="kpi-title">Ventas Canceladas</h3>
                        <div class="kpi-value">$ 0</div>
                        <div class="kpi-description">0 pedidos cancelados</div>
                    </div>
                </div>

                </div>
    
                <!-- Sección de gráficos -->
                <div class="charts-grid">
                    <!-- Gráfico de Ventas Anuales -->
                    <div class="chart-card">
                        <div class="chart-header">
                            <h3>Ventas Anuales</h3>
                        </div>
                        <div class="chart-body">
                            <canvas id="ventasAnualesChart"></canvas>
                        </div>
                    </div>
                    
                    <!-- Gráfico de Top 10 Productos -->
                    <div class="chart-card">
                        <div class="chart-header">
                            <h3>Top 10 Productos del Mes</h3>
                        </div>
                        <div class="chart-body">
                            <canvas id="topProductosChart"></canvas>
                        </div>
                    </div>
                </div>
            <?php endif; ?>

            <?php if (!empty($data)): ?>
                <?php
                    // Obtener encabezados del primer registro
                    $allHeaders = array_keys($data[0]);
                    
                    // Definir columnas que no deben mostrarse
                    $hiddenColumns = ['id_estado', 'url_pdf_boleta', 'link_factura'];
                    
                    // Filtrar los headers para excluir las columnas ocultas
                    $headers = array_filter($allHeaders, function($header) use ($hiddenColumns) {
                        return !in_array($header, $hiddenColumns);
                    });
                ?>
                
                <!-- Panel de filtros elegante -->
                <div id="filters-panel" class="filters-panel" style="display:none;">
                    <div class="filters-wrapper">
                        <div class="filters-header">
                            <h3>Filtros de búsqueda</h3>
                            <span class="filters-subtitle">Filtra la tabla por columnas específicas</span>
                        </div>
                        <div class="filters-grid">
                            <?php 
                            $index = 0;
                            foreach ($headers as $header): 
                            ?>
                                <div class="filter-cell">
                                    <label class="filter-label"><?= formatColumnName($header) ?></label>
                                    <?php 
                                        // Detectar si es un campo de fecha basado en el nombre
                                        $isDateField = isDateField($header);
                                        
                                        if ($isDateField): 
                                        // Procesar valores de fecha
                                        $fieldValue = isset($filters[$header]) ? $filters[$header] : '';
                                    ?>
                                        <div class="filter-input-group">
                                            <i class="fas fa-calendar-alt filter-icon"></i>
                                            <input type="text" 
                                                class="filter-input datepicker" 
                                                id="filter_<?= $index ?>"
                                                data-column="<?= $this->escapeHtml($header) ?>" 
                                                data-column-index="<?= $index ?>"
                                                data-is-date="1"
                                                value="<?= $fieldValue ?>"
                                                placeholder="Seleccionar fecha...">
                                            <button type="button" class="filter-btn" onclick="applyServerFilter('<?= $this->escapeJs($header) ?>')">
                                                <i class="fas fa-search"></i>
                                            </button>
                                        </div>
                                    <?php else: ?>
                                        <div class="filter-input-group">
                                            <i class="fas fa-search filter-icon"></i>
                                            <input type="text" class="filter-input column-filter" 
                                                id="filter_<?= $index ?>"
                                                data-column="<?= $this->escapeHtml($header) ?>" 
                                                data-column-index="<?= $index ?>" 
                                                data-is-date="0"
                                                value="<?= isset($filters[$header]) ? $this->escapeHtml($filters[$header]) : '' ?>"
                                                placeholder="Filtrar...">
                                        </div>
                                    <?php endif; ?>
                                </div>
                            <?php 
                            $index++;
                            endforeach; 
                            ?>
                        </div>
                        <div class="filters-footer">
                            <button type="button" id="apply-all-filters" class="btn btn-primary">
                                <i class="fas fa-database"></i> Buscar en toda la base de datos
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Tarjeta de tabla con scroll horizontal -->
                <div class="table-card">
                    <div class="table-card-header">
                        <div class="header-left">
                            <span class="records-info">Mostrando <span id="visible-count"><?= count($data) ?></span> de <span id="total-count"><?= $total ?></span> registros</span>
                        </div>
                        <div class="header-right">
                            <div class="search-box">
                                <i class="fas fa-search search-icon"></i>
                                <input type="text" id="global-search" class="search-input" 
                                    value="<?= $this->escapeHtml($search) ?>"
                                    placeholder="Buscar en todos los campos...">
                                <button type="button" id="global-search-btn" class="btn btn-sm btn-primary">
                                    <i class="fas fa-search"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Contenedor con scroll horizontal -->
                    <div class="table-scroll-container">
                        <table id="detailTable" class="data-table">
                            <thead>
                                <tr>
                                    <?php foreach ($headers as $header): ?>
                                        <th data-column="<?= $header ?>"><?= formatColumnName($header) ?></th>
                                    <?php endforeach; ?>
                                </tr>
                            </thead>
                            <tbody>
                                <?php foreach ($data as $row): ?>
                                    <tr>
                                        <?php foreach ($headers as $header): ?>
                                            <?php
                                                // Obtener el valor de la celda, teniendo en cuenta posible uso de lowercase
                                                $cellValue = $row[$header] ?? $row[strtolower($header)] ?? '';
                                                
                                                // Comprobar si es un campo de fecha
                                                $isDate = isDateField($header);
                                                
                                                // Formatear fecha si es necesario
                                                if ($isDate && !empty($cellValue)) {
                                                    $cellValue = formatDateForDisplay($cellValue);
                                                }
                                            ?>
                                            
                                            <?php if ($header === 'numero_boleta' && isset($row['url_pdf_boleta']) && !empty($row['url_pdf_boleta'])): ?>
                                            <td>
                                                <a href="<?= $this->escapeHtmlAttr($row['url_pdf_boleta']) ?>" 
                                                target="_blank" 
                                                class="boleta-link" 
                                                title="Ver boleta">
                                                    <i class="fas fa-file-pdf"></i>
                                                    <?= $this->escapeHtml($cellValue) ?>
                                                </a>
                                            </td>
                                            <?php elseif ($header === 'nro_solicitud_de_pago' && isset($row['link_factura']) && !empty($row['link_factura'])): ?>
                                            <td>
                                                <a href="<?= $this->escapeHtmlAttr($row['link_factura']) ?>" 
                                                target="_blank" 
                                                class="boleta-link" 
                                                title="Ver factura">
                                                    <i class="fas fa-file-invoice-dollar"></i>
                                                    <?= $this->escapeHtml($cellValue) ?>
                                                </a>
                                            </td>
                                            <?php else: ?>
                                            <td><?= $this->escapeHtml($cellValue) ?></td>
                                            <?php endif; ?>
                                        <?php endforeach; ?>
                                    </tr>
                                <?php endforeach; ?>
                            </tbody>
                        </table>
                    </div>
                    
                    <div class="table-card-footer">
                        <div class="footer-left">
                            <div class="page-size">
                                <span>Mostrar</span>
                                <select id="page-size-select">
                                    <option value="50" <?= $limit == 50 ? 'selected' : '' ?>>50</option>
                                    <option value="100" <?= $limit == 100 ? 'selected' : '' ?>>100</option>
                                    <option value="150" <?= $limit == 150 ? 'selected' : '' ?>>150</option>
                                </select>
                                <span>registros</span>
                            </div>
                        </div>
                        <div class="footer-right">
                            <!-- Paginación basada en enlaces directos -->
                            <div class="pagination-container" id="pagination-area">
                                <?php if ($totalPages > 1): 
                                    // Construir base de URL de paginación
                                    $paginationParams = [];
                                    if ($limit != 50) {
                                        $paginationParams['limit'] = $limit;
                                    }
                                    if (!empty($search)) {
                                        $paginationParams['search'] = $search;
                                    }
                                    foreach ($filters as $key => $value) {
                                        $paginationParams['filter_' . $key] = $value;
                                    }
                                    $queryString = http_build_query($paginationParams);
                                    $baseUrl = $this->url('application', ['action' => 'detail', 'table' => $table]);
                                    $baseUrl .= empty($queryString) ? '?' : ('?' . $queryString . '&');
                                ?>
                                    <!-- Primera página -->
                                    <a href="<?= $baseUrl ?>page=1" 
                                    class="pagination-button <?= $page <= 1 ? 'disabled' : '' ?>">
                                        <i class="fas fa-angle-double-left"></i>
                                    </a>
                                    
                                    <!-- Página anterior -->
                                    <a href="<?= $baseUrl ?>page=<?= max(1, $page - 1) ?>" 
                                    class="pagination-button <?= $page <= 1 ? 'disabled' : '' ?>">
                                        <i class="fas fa-angle-left"></i>
                                    </a>
                                    
                                    <!-- Páginas numeradas -->
                                    <?php
                                        $startPage = max(1, $page - 1);
                                        $endPage = min($totalPages, $page + 1);
                                        
                                        if ($startPage > 1):
                                    ?>
                                        <a href="<?= $baseUrl ?>page=1" 
                                        class="pagination-button">1</a>
                                        
                                        <?php if ($startPage > 2): ?>
                                            <span class="pagination-button disabled">...</span>
                                        <?php endif; ?>
                                    <?php endif; ?>
                                    
                                    <?php for ($i = $startPage; $i <= $endPage; $i++): ?>
                                        <a href="<?= $baseUrl ?>page=<?= $i ?>" 
                                        class="pagination-button <?= $i == $page ? 'active' : '' ?>">
                                            <?= $i ?>
                                        </a>
                                    <?php endfor; ?>
                                    
                                    <?php if ($endPage < $totalPages): ?>
                                        <?php if ($endPage < $totalPages - 1): ?>
                                            <span class="pagination-button disabled">...</span>
                                        <?php endif; ?>
                                        
                                        <a href="<?= $baseUrl ?>page=<?= $totalPages ?>" 
                                        class="pagination-button">
                                            <?= $totalPages ?>
                                        </a>
                                    <?php endif; ?>
                                    
                                    <!-- Página siguiente -->
                                    <a href="<?= $baseUrl ?>page=<?= min($totalPages, $page + 1) ?>" 
                                    class="pagination-button <?= $page >= $totalPages ? 'disabled' : '' ?>">
                                        <i class="fas fa-angle-right"></i>
                                    </a>
                                    
                                    <!-- Última página -->
                                    <a href="<?= $baseUrl ?>page=<?= $totalPages ?>" 
                                    class="pagination-button <?= $page >= $totalPages ? 'disabled' : '' ?>">
                                        <i class="fas fa-angle-double-right"></i>
                                    </a>
                                <?php endif; ?>
                            </div>
                        </div>
                    </div>
                </div>
                
            <?php else: ?>
                <div class="empty-state">
                    <div class="empty-state-icon">
                        <i class="fas fa-database"></i>
                    </div>
                    <h2>No hay datos disponibles</h2>
                    <p>No se encontraron registros en la tabla seleccionada.</p>
                </div>
            <?php endif; ?>

            <!-- Formulario oculto para manejar filtros y paginación -->
            <form id="tableForm" method="GET" action="<?= $this->url('application', ['action' => 'detail', 'table' => $table]) ?>">
                <input type="hidden" name="page" id="page-input" value="<?= $page ?>">
                <input type="hidden" name="limit" id="limit-input" value="<?= $limit ?>">
                <input type="hidden" name="search" id="search-input" value="<?= $this->escapeHtml($search) ?>">
                
                <!-- Los filtros se agregarán dinámicamente con JavaScript -->
                <?php foreach ($filters as $filterKey => $filterValue): ?>
                    <input type="hidden" name="filter_<?= $this->escapeHtml($filterKey) ?>" value="<?= $this->escapeHtml($filterValue) ?>">
                <?php endforeach; ?>
            </form>

            <div class="dashboard-footer">
                <a href="<?= $this->url('application', ['action' => 'dashboard']) ?>" class="btn btn-back">
                    <i class="fas fa-arrow-left"></i>
                    <span>Volver al Dashboard</span>
                </a>
            </div>
        </div>
    </div>

    <!-- Scripts al final del body -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.7.0/dist/chart.min.js"></script>

    <script>
    (function($) {
        'use strict';
        
        // Variables globales
        var jsonData = <?= json_encode($data) ?>;
        var jsonVentasAnuales = <?= $jsonVentasAnuales ?>;
        var jsonTopProductos = <?= $jsonTopProductos ?>;
        
        // Función para formatear fecha para mostrar
        function formatDateForDisplay(dateString) {
            if (!dateString) return '';
            
            // Crear un objeto Date a partir de la cadena
            const date = new Date(dateString);
            if (isNaN(date.getTime())) return dateString; // Si no es una fecha válida, devolver original
            
            // Formatear como DD/MM/YYYY
            const day = String(date.getDate()).padStart(2, '0');
            const month = String(date.getMonth() + 1).padStart(2, '0'); // Mes es base 0
            const year = date.getFullYear();
            
            return `${day}/${month}/${year}`;
        }
        
        // Función para formatear fecha para el servidor
        function formatDateForServer(dateString) {
            if (!dateString) return '';
            
            // Si está en formato DD/MM/YYYY, convertir a YYYY-MM-DD
            if (/^\d{1,2}\/\d{1,2}\/\d{4}$/.test(dateString)) {
                const parts = dateString.split('/');
                return `${parts[2]}-${String(parts[1]).padStart(2, '0')}-${String(parts[0]).padStart(2, '0')}`;
            }
            
            return dateString;
        }
        
        // Inicialización de KPIs
        function initializeKPIs() {
            console.log("Iniciando cálculo de KPIs...");
            
            // Obtener los datos
            const data = jsonData;
            console.log("Datos cargados:", data.length, "registros");
            
            // Si no hay datos, mostrar mensaje y salir
            if (!data || data.length === 0) {
                console.warn("No hay datos disponibles para procesar");
                return;
            }

            // Información de fecha actual
            const hoy = new Date();
            const mesActual = hoy.getMonth() + 1; // JavaScript: 0-11
            const anioActual = hoy.getFullYear();

            // Contadores y acumuladores
            const boletasUnicas = new Map();
            const boletasCanceladas = new Map();
            let totalVentas = 0;
            let totalBase = 0;
            let totalImpuesto = 0;

            // Procesar cada registro
            data.forEach((row, index) => {
                // Identificador de boleta (intentar diferentes campos)
                const numeroBoleta = row.numero_boleta || row.numero_suborden || row.id;
                
                // Si falta identificador, ignorar registro
                if (!numeroBoleta) {
                    return;
                }
                
                // Procesar fecha
                let fecha;
                if (typeof row.fecha_creacion === 'string') {
                    if (row.fecha_creacion.includes('T')) {
                        fecha = new Date(row.fecha_creacion);
                    } else {
                        fecha = new Date(row.fecha_creacion.replace(' ', 'T'));
                    }
                } else if (row.fecha_creacion instanceof Date) {
                    fecha = row.fecha_creacion;
                }
                
                // Si no hay fecha válida, ignorar
                if (!fecha || isNaN(fecha.getTime())) {
                    return;
                }
                
                // Verificar si es del mes actual
                const mesFecha = fecha.getMonth() + 1;
                const anioFecha = fecha.getFullYear();
                const mismoMes = mesFecha === mesActual && anioFecha === anioActual;
                
                if (!mismoMes) {
                    return; // No es del mes actual
                }
                
                // Determinar estado
                const estado = (row.estado || "").toLowerCase();
                const isCancelado = 
                    estado.includes("anulad") || 
                    estado.includes("cancel") || 
                    estado.includes("rechaz") || 
                    estado.includes("delet");
                
                // Obtener valores numéricos con seguridad
                const monto = parseFloat(row.monto_total_boleta || 0);
                const base = parseFloat(row.precio_base || 0);
                const impuesto = parseFloat(row.monto_impuesto_boleta || 0);
                
                // Evitar valores NaN
                const montoSeguro = isNaN(monto) ? 0 : monto;
                const baseSegura = isNaN(base) ? 0 : base;
                const impuestoSeguro = isNaN(impuesto) ? 0 : impuesto;
                
                // Procesar según estado
                if (!isCancelado) {
                    if (!boletasUnicas.has(numeroBoleta)) {
                        boletasUnicas.set(numeroBoleta, {
                            monto: montoSeguro, 
                            base: baseSegura, 
                            impuesto: impuestoSeguro
                        });
                        
                        totalVentas += montoSeguro;
                        totalBase += baseSegura;
                        totalImpuesto += impuestoSeguro;
                    }
                } else {
                    if (!boletasCanceladas.has(numeroBoleta)) {
                        boletasCanceladas.set(numeroBoleta, montoSeguro);
                    }
                }
            });

            // Actualizar KPIs en el DOM
            try {
                // Venta Bruta
                const kpiBruta = document.querySelector(".kpi-bruta");
                if (kpiBruta) {
                    kpiBruta.querySelector(".kpi-value").textContent = "$ " + formatCLP(totalBase);
                    kpiBruta.querySelector(".kpi-description").textContent = `${boletasUnicas.size} transacciones este mes`;
                }
                
                // Impuesto
                const kpiImpuesto = document.querySelector(".kpi-impuesto");
                if (kpiImpuesto) {
                    kpiImpuesto.querySelector(".kpi-value").textContent = "$ " + formatCLP(totalImpuesto);
                }
                
                // Total
                const kpiTotal = document.querySelector(".kpi-total");
                if (kpiTotal) {
                    kpiTotal.querySelector(".kpi-value").textContent = "$ " + formatCLP(totalVentas);
                    kpiTotal.querySelector(".kpi-description").textContent = `${boletasUnicas.size} transacciones totales`;
                }
                
                // Canceladas
                const kpiCanceladas = document.querySelector(".kpi-canceladas");
                const canceladoTotal = [...boletasCanceladas.values()].reduce((acc, val) => acc + val, 0);
                if (kpiCanceladas) {
                    kpiCanceladas.querySelector(".kpi-value").textContent = "$ " + formatCLP(canceladoTotal);
                    kpiCanceladas.querySelector(".kpi-description").textContent = `${boletasCanceladas.size} pedidos cancelados`;
                }
            } catch (error) {
                console.error("Error al actualizar KPIs:", error);
            }

            // Formatear valores numéricos
            function formatCLP(num) {
                return new Intl.NumberFormat('es-CL').format(Math.round(num));
            }
        }
        
        // Inicialización de gráficos
        function initializeCharts() {
            if (typeof Chart === 'undefined') {
                console.error("Chart.js no está disponible");
                return;
            }
            
            try {
                // Verificar que los canvas existen
                const ventasAnualesElement = document.getElementById('ventasAnualesChart');
                const topProductosElement = document.getElementById('topProductosChart');
                
                if (!ventasAnualesElement || !topProductosElement) {
                    return;
                }
                
                // Gráfico de ventas anuales
                if (jsonVentasAnuales && jsonVentasAnuales.length > 0) {
                    const ventasCtx = ventasAnualesElement.getContext('2d');
                    new Chart(ventasCtx, {
                        type: 'bar',
                        data: {
                            labels: jsonVentasAnuales.map(item => item.mes),
                            datasets: [{
                                label: 'Ventas',
                                data: jsonVentasAnuales.map(item => item.ventas),
                                backgroundColor: 'rgba(67, 97, 238, 0.7)',
                                borderColor: 'rgba(67, 97, 238, 1)',
                                borderWidth: 1
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                legend: {
                                    position: 'top',
                                },
                                tooltip: {
                                    callbacks: {
                                        label: function(context) {
                                            let label = context.dataset.label || '';
                                            if (label) {
                                                label += ': ';
                                            }
                                            if (context.parsed.y !== null) {
                                                label += new Intl.NumberFormat('es-CL', { 
                                                    style: 'currency', 
                                                    currency: 'CLP' 
                                                }).format(context.parsed.y);
                                            }
                                            return label;
                                        },
                                        afterLabel: function(context) {
                                            const index = context.dataIndex;
                                            const boletas = jsonVentasAnuales[index].cantidad || 0;
                                            return `Boletas: ${boletas}`;
                                        }
                                    }
                                }
                            },
                            scales: {
                                y: {
                                    beginAtZero: true,
                                    ticks: {
                                        callback: function(value) {
                                            return new Intl.NumberFormat('es-CL', { 
                                                style: 'currency', 
                                                currency: 'CLP',
                                                maximumFractionDigits: 0
                                            }).format(value);
                                        }
                                    }
                                }
                            }
                        }
                    });
                } else {
                    ventasAnualesElement.parentNode.innerHTML = '<div class="no-data-message">No hay datos disponibles para mostrar</div>';
                }
                
                // Gráfico de top 10 productos
                if (jsonTopProductos && jsonTopProductos.length > 0) {
                    const productosCtx = topProductosElement.getContext('2d');
                    new Chart(productosCtx, {
                        type: 'bar',
                        data: {
                            labels: jsonTopProductos.map(item => {
                                // Acortar nombres largos
                                const nombre = item.nombre || '';
                                return nombre.length > 20 ? nombre.substring(0, 18) + '...' : nombre;
                            }),
                            datasets: [{
                                label: 'Ventas',
                                data: jsonTopProductos.map(item => item.ventas),
                                backgroundColor: 'rgba(76, 175, 80, 0.7)',
                                borderColor: 'rgba(76, 175, 80, 1)',
                                borderWidth: 1
                            }]
                        },
                        options: {
                            indexAxis: 'y',
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                legend: {
                                    position: 'top',
                                },
                                tooltip: {
                                    callbacks: {
                                        title: function(tooltipItems) {
                                            const index = tooltipItems[0].dataIndex;
                                            return jsonTopProductos[index].nombre;
                                        },
                                        label: function(context) {
                                            let label = "Ventas: ";
                                            if (context.parsed.x !== null) {
                                                label += new Intl.NumberFormat('es-CL', { 
                                                    style: 'currency', 
                                                    currency: 'CLP' 
                                                }).format(context.parsed.x);
                                            }
                                            return label;
                                        },
                                        afterLabel: function(context) {
                                            const index = context.dataIndex;
                                            const cantidad = jsonTopProductos[index].cantidad || 0;
                                            return "Cantidad: " + cantidad;
                                        }
                                    }
                                }
                            },
                            scales: {
                                x: {
                                    beginAtZero: true,
                                    ticks: {
                                        callback: function(value) {
                                            return new Intl.NumberFormat('es-CL', { 
                                                style: 'currency', 
                                                currency: 'CLP',
                                                maximumFractionDigits: 0
                                            }).format(value);
                                        }
                                    }
                                }
                            }
                        }
                    });
                } else {
                    topProductosElement.parentNode.innerHTML = '<div class="no-data-message">No hay datos disponibles para mostrar</div>';
                }
            } catch (error) {
                console.error("Error al inicializar los gráficos:", error);
            }
        }
        
        // Filtrado en tiempo real
        function filterTableInRealTime() {
            // Obtener el valor de búsqueda global
            var globalSearchTerm = $('#global-search').val().toLowerCase();
            
            // Mostrar todas las filas primero
            $('#detailTable tbody tr').show();
            
            // Aplicar búsqueda global
            if (globalSearchTerm) {
                $('#detailTable tbody tr').each(function() {
                    var rowText = $(this).text().toLowerCase();
                    if (rowText.indexOf(globalSearchTerm) === -1) {
                        $(this).hide();
                    }
                });
            }
            
            // Aplicar filtros de columna
            $('.column-filter').each(function() {
                var columnIndex = $(this).data('column-index');
                var filterValue = $(this).val().toLowerCase();
                
                if (filterValue) {
                    $(this).addClass('active-filter');
                    $('#detailTable tbody tr:visible').each(function() {
                        var cellText = $(this).find('td').eq(columnIndex).text().toLowerCase();
                        if (cellText.indexOf(filterValue) === -1) {
                            $(this).hide();
                        }
                    });
                } else {
                    $(this).removeClass('active-filter');
                }
            });
            
            // Actualizar contador
            $('#visible-count').text($('#detailTable tbody tr:visible').length);
        }
        
        // Obtener filtros actuales
        function getCurrentFilters() {
            var filters = {};
            
            // Agregar filtros de campo normales
            $('.column-filter').each(function() {
                var value = $(this).val();
                if (value) {
                    var column = $(this).data('column');
                    filters['filter_' + column] = value;
                }
            });
            
            // Agregar filtros de fechas
            $('.datepicker').each(function() {
                var value = $(this).val();
                if (value) {
                    var column = $(this).data('column');
                    // Convertir al formato que entiende el servidor
                    filters['filter_' + column] = formatDateForServer(value);
                }
            });
            
            // Agregar búsqueda global
            var searchTerm = $('#global-search').val();
            if (searchTerm) {
                filters.search = searchTerm;
            }
            
            // Agregar paginación
            filters.page = $('#page-input').val();
            filters.limit = $('#limit-input').val();
            
            return filters;
        }
        
        // Enviar al servidor
        function sendToServer(params) {
            // Completar con parámetros actuales
            var currentParams = getCurrentFilters();
            // Sobrescribir con nuevos parámetros
            for (var key in params) {
                currentParams[key] = params[key];
            }
            
            // Crear formulario y enviar
            var form = $('<form>', {
                'method': 'GET',
                'action': window.location.pathname
            });
            
            for (var key in currentParams) {
                $('<input>').attr({
                    'type': 'hidden',
                    'name': key,
                    'value': currentParams[key]
                }).appendTo(form);
            }
            
            form.appendTo('body').submit();
        }
        
        // Inicialización principal
        $(document).ready(function() {
            console.log("Documento cargado, inicializando...");
            
            // Inicializar datepicker
            $(".datepicker").datepicker({
                dateFormat: "dd/mm/yy",
                changeMonth: true,
                changeYear: true,
                yearRange: "1900:2100",
                showOtherMonths: true,
                selectOtherMonths: true,
                onSelect: function(dateText) {
                    $(this).val(dateText);
                    filterTableInRealTime();
                }
            });
            
            // Convertir valores iniciales de fechas al formato de visualización
            $(".datepicker").each(function() {
                const val = $(this).val();
                if (val) {
                    $(this).val(formatDateForDisplay(val));
                }
            });
            
            // Inicializar KPIs
            initializeKPIs();
            
            // Inicializar gráficos
            initializeCharts();
            
            // Mostrar el panel de filtros si hay filtros aplicados
            if ($('.column-filter[value!=""]').length > 0 || $('#global-search').val() || $('.datepicker[value!=""]').length > 0) {
                $('#filters-panel').show();
            }

            // Mostrar/ocultar el panel de filtros
            $('#toggle-filters').on('click', function() {
                $('#filters-panel').slideToggle(300);
            });

            // Filtrar en tiempo real al escribir en campos
            $('.column-filter').on('input', function() {
                filterTableInRealTime();
            });

            // Filtrar en tiempo real al escribir en búsqueda global
            $('#global-search').on('input', function() {
                filterTableInRealTime();
            });

            // Limpiar filtros
            $('#clear-filters').on('click', function(e) {
                e.preventDefault();
                
                // Verificar si hay filtros aplicados a nivel de servidor
                var hasServerFilters = $('.column-filter[value!=""]').length > 0 || 
                                    $('#global-search').val() || 
                                    $('.datepicker[value!=""]').length > 0;
                
                // Limpiar campos
                $('.column-filter').val('').removeClass('active-filter');
                $('.datepicker').val('').removeClass('active-filter');
                $('#global-search').val('');
                
                if (hasServerFilters) {
                    // Si había filtros en servidor, redirigir sin filtros
                    window.location.href = '<?= $this->url('application', ['action' => 'detail', 'table' => $table]) ?>?limit=50';
                } else {
                    // Solo filtrado local
                    $('#detailTable tbody tr').show();
                    $('#visible-count').text($('#detailTable tbody tr').length);
                }
                
                return false;
            });

            // Buscar con botón global
            $('#global-search-btn').on('click', function() {
                var searchTerm = $('#global-search').val();
                sendToServer({search: searchTerm});
            });

            // Búsqueda global con Enter
            $('#global-search').on('keypress', function(e) {
                if (e.which === 13) {
                    var searchTerm = $(this).val();
                    sendToServer({search: searchTerm});
                    return false;
                }
            });

            // Buscar en toda la base de datos
            $('#apply-all-filters').on('click', function() {
                var filters = {};
                var hasFilters = false;
                
                // Recolectar todos los filtros regulares
                $('.column-filter').each(function() {
                    var value = $(this).val();
                    if (value) {
                        hasFilters = true;
                        var column = $(this).data('column');
                        filters['filter_' + column] = value;
                    }
                });
                
                // Recolectar filtros de fecha
                $('.datepicker').each(function() {
                    var value = $(this).val();
                    if (value) {
                        hasFilters = true;
                        var column = $(this).data('column');
                        // Convertir al formato que entiende el servidor
                        filters['filter_' + column] = formatDateForServer(value);
                    }
                });
                
                // Agregar búsqueda global
                var searchTerm = $('#global-search').val();
                if (searchTerm) {
                    hasFilters = true;
                    filters.search = searchTerm;
                }
                
                if (hasFilters) {
                    sendToServer(filters);
                } else {
                    alert("No hay filtros aplicados para buscar.");
                }
            });

            // Cambiar tamaño de página
            $('#page-size-select').on('change', function() {
                var filters = getCurrentFilters();
                filters.limit = $(this).val();
                filters.page = 1; // Volver a primera página
                sendToServer(filters);
            });

            // Exportar a CSV
            $('#export-csv').on('click', function() {
                var filters = getCurrentFilters();
                filters.export = 'csv';
                // Agregar parámetro para indicar qué columnas excluir
                filters.hidden_columns = 'id_estado,url_pdf_boleta,link_factura';
                sendToServer(filters);
            });

            // Inicialmente filtramos para aplicar los filtros que puedan estar en la URL
            filterTableInRealTime();
        });
        
        // Función global para buscar en el servidor con un filtro específico
        window.applyServerFilter = function(column) {
            console.log("Aplicando filtro para columna:", column);
            
            var input = $('input[data-column="' + column + '"]');
            var value = input.val();
            
            if (value) {
                // Si es una fecha, convertir al formato del servidor
                if (input.hasClass('datepicker')) {
                    value = formatDateForServer(value);
                }
                
                var filters = {};
                filters['filter_' + column] = value;
                
                // Crear formulario y enviar
                var form = $('<form>', {
                    'method': 'GET',
                    'action': window.location.pathname
                });
                
                // Añadir filtro
                $('<input>').attr({
                    'type': 'hidden',
                    'name': 'filter_' + column,
                    'value': value
                }).appendTo(form);
                
                // Añadir parámetros de paginación
                $('<input>').attr({
                    'type': 'hidden',
                    'name': 'limit',
                    'value': $('#limit-input').val()
                }).appendTo(form);
                
                // Añadir otros filtros activos
                $('.column-filter').not(input).each(function() {
                    var val = $(this).val();
                    if (val) {
                        var col = $(this).data('column');
                        $('<input>').attr({
                            'type': 'hidden',
                            'name': 'filter_' + col,
                            'value': val
                        }).appendTo(form);
                    }
                });
                
                // Añadir otros datepickers activos
                $('.datepicker').not(input).each(function() {
                    var val = $(this).val();
                    if (val) {
                        var col = $(this).data('column');
                        $('<input>').attr({
                            'type': 'hidden',
                            'name': 'filter_' + col,
                            'value': formatDateForServer(val)
                        }).appendTo(form);
                    }
                });
                
                // Búsqueda global
                var searchTerm = $('#global-search').val();
                if (searchTerm) {
                    $('<input>').attr({
                        'type': 'hidden',
                        'name': 'search',
                        'value': searchTerm
                    }).appendTo(form);
                }
                
                // Enviar formulario
                form.appendTo('body').submit();
            }
        };
        
    })(jQuery);
    </script>
    </body>
    </html>