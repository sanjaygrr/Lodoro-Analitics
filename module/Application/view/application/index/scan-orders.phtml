<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Escáner de Órdenes - Lodoro Analytics</title>
    
    <!-- Bootstrap 5 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
    
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    
    <!-- Google Fonts - Inter -->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap">
    
    <style>
        :root {
            --primary: #4361ee;
            --primary-light: #4895ef;
            --primary-dark: #3f37c9;
            --secondary: #6c757d;
            --success: #4caf50;
            --danger: #f44336;
            --warning: #ff9800;
            --info: #2196f3;
            --background: #f5f7fb;
            --text-main: #3b3f5c;
            --text-muted: #6c757d;
            --border-color: #e0e6ed;
            --shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
            --transition-speed: 0.3s;
        }
        
        body {
            font-family: 'Inter', sans-serif;
            background-color: var(--background);
            margin: 0;
            padding: 0;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }
        
        .scanner-container {
            max-width: 800px;
            margin: 50px auto;
            padding: 2rem;
            background-color: #fff;
            border-radius: 0.5rem;
            box-shadow: var(--shadow);
        }
        
        .scanner-title {
            text-align: center;
            margin-bottom: 2rem;
            color: var(--primary);
        }
        
        .scanner-icon {
            font-size: 3rem;
            margin-bottom: 1rem;
            color: var(--primary);
        }
        
        .scanner-input-group {
            margin-bottom: 2rem;
        }
        
        .scan-result {
            margin-top: 2rem;
            padding: 1rem;
            border-radius: 0.5rem;
            display: none;
        }
        
        .scan-result.success {
            background-color: rgba(76, 175, 80, 0.1);
            border: 1px solid rgba(76, 175, 80, 0.5);
        }
        
        .scan-result.error {
            background-color: rgba(244, 67, 54, 0.1);
            border: 1px solid rgba(244, 67, 54, 0.5);
        }
        
        .scan-history {
            margin-top: 3rem;
        }
        
        .history-title {
            border-bottom: 1px solid var(--border-color);
            padding-bottom: 0.5rem;
            margin-bottom: 1rem;
        }
        
        .history-empty {
            text-align: center;
            padding: 2rem;
            color: var(--text-muted);
        }
        
        .scan-footer {
            margin-top: 2rem;
            text-align: center;
            color: var(--text-muted);
            font-size: 0.9rem;
        }
        
        /* Camera Styles */
        .camera-container {
            margin-top: 2rem;
            display: none;
        }
        
        #camera-preview {
            width: 100%;
            max-width: 400px;
            height: 300px;
            border: 2px solid var(--border-color);
            border-radius: 0.5rem;
            margin: 0 auto;
            display: block;
            background-color: #f8f9fa;
        }
        
        .scanner-actions {
            display: flex;
            justify-content: space-between;
            margin-top: 1rem;
        }
        
        .marketplace-badge {
            padding: 0.5rem 1rem;
            border-radius: 1rem;
            color: white;
            font-weight: 500;
            display: inline-block;
            margin-bottom: 0.5rem;
        }
        
        .marketplace-WALLMART {
            background-color: #0071ce;
        }
        
        .marketplace-RIPLEY {
            background-color: #e60000;
        }
        
        .marketplace-FALABELLA {
            background-color: #0a4a90;
        }
        
        .marketplace-MERCADO_LIBRE {
            background-color: #ffe600;
            color: #333;
        }
        
        .marketplace-PARIS {
            background-color: #e71785;
        }
        
        .marketplace-WOOCOMMERCE {
            background-color: #7f54b3;
        }
        
        /* Loading Spinner */
        .spinner-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
            display: none;
        }
        
        .spinner-content {
            background-color: white;
            padding: 2rem;
            border-radius: 0.5rem;
            text-align: center;
        }
    </style>
</head>
<body>
    <div class="container py-4">
        <!-- Encabezado -->
        <div class="row mb-4">
            <div class="col-md-6">
                <h1 class="h3 mb-0">Escáner de Órdenes</h1>
                <p class="text-muted mb-0">Escanee un número de suborden para procesarla</p>
            </div>
            <div class="col-md-6 text-end">
                <a href="dashboard" class="btn btn-outline-secondary">
                    <i class="fas fa-arrow-left me-1"></i> Volver al Dashboard
                </a>
            </div>
        </div>
        
        <div class="scanner-container">
            <div class="text-center mb-4">
                <i class="fas fa-barcode scanner-icon"></i>
                <h2 class="scanner-title">Escáner de Órdenes</h2>
                <p class="lead">Escanee o ingrese un número de suborden para acceder a los detalles</p>
            </div>
            
            <div class="scanner-input-group">
                <div class="input-group input-group-lg mb-3">
                    <span class="input-group-text"><i class="fas fa-search"></i></span>
                    <input type="text" class="form-control form-control-lg" id="orderNumberInput" 
                           placeholder="Escanee o ingrese el número de suborden" autofocus>
                    <button class="btn btn-primary" id="searchOrderBtn" type="button">
                        <i class="fas fa-search me-1"></i> Buscar
                    </button>
                </div>
                <div class="form-text text-center">Puede ingresar el número manualmente o usar un escáner de códigos de barras</div>
            </div>
            
            <div class="scanner-actions">
                <button class="btn btn-outline-primary" id="toggleCameraBtn">
                    <i class="fas fa-camera me-1"></i> Usar cámara
                </button>
                
                <button class="btn btn-outline-secondary" id="clearInputBtn">
                    <i class="fas fa-eraser me-1"></i> Limpiar
                </button>
            </div>
            
            <div class="camera-container" id="cameraContainer">
                <video id="camera-preview" autoplay playsinline></video>
                <div class="d-flex justify-content-center mt-3">
                    <button class="btn btn-danger me-2" id="stopCameraBtn">
                        <i class="fas fa-stop-circle me-1"></i> Detener cámara
                    </button>
                </div>
            </div>
            
            <div id="scanResult" class="scan-result">
                <!-- El resultado del escaneo aparecerá aquí -->
            </div>
            
            <div class="scan-history">
                <h4 class="history-title">Historial de escaneos recientes</h4>
                <div id="historyList">
                    <div class="history-empty">
                        <i class="fas fa-history mb-2"></i>
                        <p>No hay registros de escaneos recientes</p>
                    </div>
                </div>
            </div>
            
            <div class="scan-footer">
                <p>Sistema Lodoro Analytics - Escáner de Órdenes v1.0</p>
            </div>
        </div>
    </div>
    
    <!-- Spinner de carga -->
    <div class="spinner-overlay" id="loadingSpinner">
        <div class="spinner-content">
            <div class="spinner-border text-primary mb-3" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
            <p>Buscando orden, por favor espere...</p>
        </div>
    </div>

    <!-- JavaScript -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/quagga@0.12.1/dist/quagga.min.js"></script>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Elementos DOM
            const orderInput = document.getElementById('orderNumberInput');
            const searchBtn = document.getElementById('searchOrderBtn');
            const clearBtn = document.getElementById('clearInputBtn');
            const toggleCameraBtn = document.getElementById('toggleCameraBtn');
            const stopCameraBtn = document.getElementById('stopCameraBtn');
            const cameraContainer = document.getElementById('cameraContainer');
            const scanResult = document.getElementById('scanResult');
            const historyList = document.getElementById('historyList');
            const loadingSpinner = document.getElementById('loadingSpinner');
            
            // Variables para manejo de escáner
            let lastScanTime = 0;
            let barcodeParts = [];
            const MAX_SCAN_GAP = 50; // máximo tiempo entre caracteres en ms
            
            // Cargar historial de localStorage
            loadScanHistory();
            
            // Función para buscar una orden
            function searchOrder() {
                const orderNumber = orderInput.value.trim();
                
                if (!orderNumber) {
                    showResult('error', 'Por favor ingrese un número de suborden para buscar');
                    return;
                }
                
                // Mostrar spinner de carga
                loadingSpinner.style.display = 'flex';
                
                // Enviar solicitud AJAX para buscar la orden
                fetch('/application/find-order', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify({
                        suborderNumber: orderNumber
                    })
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`Error HTTP ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    // Ocultar spinner
                    loadingSpinner.style.display = 'none';
                    
                    if (data.success) {
                        // Guardar en historial
                        addToHistory(orderNumber, data.tableName, data.marketplace);
                        
                        // Mostrar resultado exitoso
                        showResult('success', `
                            <div class="text-center mb-3">
                                <span class="marketplace-badge marketplace-${data.marketplace}">
                                    ${data.marketplace}
                                </span>
                                <h4>Orden #${orderNumber} encontrada</h4>
                            </div>
                            <p>La orden fue encontrada en la tabla ${data.tableName}.</p>
                            <div class="d-grid gap-2 mt-3">
                                <a href="/order-detail/${orderNumber}/${data.tableName}" class="btn btn-success">
                                    <i class="fas fa-eye me-1"></i> Ver detalles y procesar
                                </a>
                            </div>
                        `);
                        
                        // Redireccionar automáticamente después de 1.5 segundos
                        setTimeout(() => {
                            window.location.href = `/order-detail/${orderNumber}/${data.tableName}`;
                        }, 1500);
                    } else {
                        // Mostrar error
                        showResult('error', `
                            <div class="text-center mb-3">
                                <i class="fas fa-exclamation-triangle text-warning fa-2x mb-2"></i>
                                <h4>Orden no encontrada</h4>
                            </div>
                            <p>${data.message || 'No se encontró ninguna orden con el número proporcionado.'}</p>
                            <div class="text-center mt-3">
                                <button class="btn btn-primary" onclick="document.getElementById('orderNumberInput').focus()">
                                    <i class="fas fa-search me-1"></i> Intentar otra búsqueda
                                </button>
                            </div>
                        `);
                    }
                })
                .catch(error => {
                    // Ocultar spinner
                    loadingSpinner.style.display = 'none';
                    
                    console.error('Error:', error);
                    showResult('error', `
                        <div class="text-center mb-3">
                            <i class="fas fa-exclamation-circle text-danger fa-2x mb-2"></i>
                            <h4>Error de comunicación</h4>
                        </div>
                        <p>Ocurrió un error al comunicarse con el servidor: ${error.message}</p>
                        <div class="text-center mt-3">
                            <button class="btn btn-primary" id="retrySearchBtn">
                                <i class="fas fa-sync-alt me-1"></i> Reintentar
                            </button>
                        </div>
                    `);
                    
                    // Agregar event listener al botón de reintento
                    document.getElementById('retrySearchBtn').addEventListener('click', searchOrder);
                });
            }
            
            // Función para mostrar resultados
            function showResult(type, message) {
                scanResult.className = 'scan-result ' + type;
                scanResult.innerHTML = message;
                scanResult.style.display = 'block';
            }
            
            // Guardar búsqueda en el historial
            function addToHistory(orderNumber, tableName, marketplace) {
                // Obtener historial actual o inicializar nuevo
                let history = JSON.parse(localStorage.getItem('orderScanHistory') || '[]');
                
                // Agregar nueva entrada al inicio
                history.unshift({
                    orderNumber: orderNumber,
                    tableName: tableName,
                    marketplace: marketplace,
                    timestamp: new Date().toISOString()
                });
                
                // Limitar a 10 entradas
                if (history.length > 10) {
                    history = history.slice(0, 10);
                }
                
                // Guardar historial actualizado
                localStorage.setItem('orderScanHistory', JSON.stringify(history));
                
                // Actualizar visualización
                loadScanHistory();
            }
            
            // Cargar historial de escaneos
            function loadScanHistory() {
                const history = JSON.parse(localStorage.getItem('orderScanHistory') || '[]');
                
                if (history.length === 0) {
                    historyList.innerHTML = `
                        <div class="history-empty">
                            <i class="fas fa-history mb-2"></i>
                            <p>No hay registros de escaneos recientes</p>
                        </div>
                    `;
                    return;
                }
                
                let html = '<div class="list-group">';
                
                history.forEach(item => {
                    const date = new Date(item.timestamp);
                    const formattedDate = date.toLocaleDateString() + ' ' + date.toLocaleTimeString();
                    
                    html += `
                        <a href="/order-detail/${item.orderNumber}/${item.tableName}" class="list-group-item list-group-item-action">
                            <div class="d-flex w-100 justify-content-between align-items-center">
                                <h5 class="mb-1">
                                    <span class="marketplace-badge marketplace-${item.marketplace}" style="font-size: 0.8rem; padding: 0.2rem 0.5rem;">
                                        ${item.marketplace}
                                    </span>
                                    Orden #${item.orderNumber}
                                </h5>
                                <small class="text-muted">${formattedDate}</small>
                            </div>
                            <p class="mb-1">Tabla: ${item.tableName}</p>
                        </a>
                    `;
                });
                
                html += '</div>';
                historyList.innerHTML = html;
            }
            
            // Limpiar entrada
            function clearInput() {
                orderInput.value = '';
                scanResult.style.display = 'none';
                orderInput.focus();
            }
            
            // Funciones para cámara
            function initCamera() {
                // Mostrar contenedor de cámara
                cameraContainer.style.display = 'block';
                
                // Inicializar QuaggaJS
                Quagga.init({
                    inputStream: {
                        name: "Live",
                        type: "LiveStream",
                        target: document.querySelector('#camera-preview'),
                        constraints: {
                            width: 640,
                            height: 480,
                            facingMode: "environment"
                        },
                    },
                    decoder: {
                        readers: [
                            "code_128_reader",
                            "ean_reader",
                            "ean_8_reader",
                            "code_39_reader",
                            "code_39_vin_reader",
                            "codabar_reader",
                            "upc_reader",
                            "upc_e_reader",
                            "i2of5_reader"
                        ],
                        multiple: false
                    }
                }, function(err) {
                    if (err) {
                        console.error("Error al inicializar la cámara:", err);
                        showResult('error', `
                            <div class="text-center mb-3">
                                <i class="fas fa-camera-retro text-danger fa-2x mb-2"></i>
                                <h4>Error de cámara</h4>
                            </div>
                            <p>No se pudo inicializar la cámara: ${err}</p>
                            <p>Asegúrese de que su navegador tiene permisos para acceder a la cámara.</p>
                        `);
                        cameraContainer.style.display = 'none';
                        return;
                    }
                    
                    console.log("Cámara inicializada correctamente");
                    Quagga.start();
                });
                
                // Evento para detección de códigos
                Quagga.onDetected(function(result) {
                    const code = result.codeResult.code;
                    console.log("Código detectado:", code);
                    
                    // Detener cámara
                    stopCamera();
                    
                    // Asignar código al input y buscar
                    orderInput.value = code;
                    searchOrder();
                });
            }
            
            function stopCamera() {
                Quagga.stop();
                cameraContainer.style.display = 'none';
            }
            
            // Event Listeners
            if (searchBtn) {
                searchBtn.addEventListener('click', searchOrder);
            }
            
            if (clearBtn) {
                clearBtn.addEventListener('click', clearInput);
            }
            
            if (toggleCameraBtn) {
                toggleCameraBtn.addEventListener('click', initCamera);
            }
            
            if (stopCameraBtn) {
                stopCameraBtn.addEventListener('click', stopCamera);
            }
            
            if (orderInput) {
                orderInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        e.preventDefault();
                        searchOrder();
                    }
                });
                
                // Soporte para escáner de código de barras (timeout entre caracteres)
                orderInput.addEventListener('keydown', function(e) {
                    if (e.key !== 'Enter') {
                        const nowTime = new Date().getTime();
                        
                        if (nowTime - lastScanTime > MAX_SCAN_GAP) {
                            // Si pasó mucho tiempo, resetear la captura del código
                            barcodeParts = [];
                        }
                        
                        // Agregar carácter al código
                        barcodeParts.push(e.key);
                        lastScanTime = nowTime;
                        
                        // Para depuración
                        console.log("Carácter capturado:", e.key, "Total:", barcodeParts.length);
                        
                        // Si el escáner envía Enter al final, entrará al otro manejador
                        // Si no, procesamos después de un delay cuando se complete el escaneo
                        setTimeout(function() {
                            const newTime = new Date().getTime();
                            // Si pasó suficiente tiempo y tenemos caracteres, asumimos que terminó el escaneo
                            if (newTime - lastScanTime >= MAX_SCAN_GAP && barcodeParts.length > 8) {
                                console.log("Detección automática de escaneo completo:", barcodeParts.join(''));
                                orderInput.value = barcodeParts.join('');
                                barcodeParts = [];
                                searchOrder();
                            }
                        }, MAX_SCAN_GAP + 5);
                    }
                });
            }
            
            // Enfocar el input al cargar la página
            if (orderInput) {
                orderInput.focus();
            }
        });
    </script>
</body>
</html>